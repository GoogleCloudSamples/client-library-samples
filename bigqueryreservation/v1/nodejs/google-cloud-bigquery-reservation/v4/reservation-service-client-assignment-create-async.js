// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const process = require('process');

// [START bigqueryreservation_v1_reservationservice_assignment_create_async]
const {ReservationServiceClient} =
  require('@google-cloud/bigquery-reservation').v1;
const {status} = require('@grpc/grpc-js');

const client = new ReservationServiceClient();

/**
 * Creates an assignment object which allows a project, folder, or organization
 * to submit jobs of a certain type using slots from the specified reservation.
 *
 * A resource (project, folder, organization) can only have one assignment per
 * each (job_type, location) combination. When creating assignments, it does not
 * matter if other assignments exist at higher levels. During query execution,
 * the assignment is looked up at the project, folder and organization levels
 * in that order. The first assignment found is applied to the query.
 *
 * "None" assignments represent an absence of the assignment. Projects assigned
 * to None use on-demand pricing. To create a "None" assignment, use "none" as
 * a reservationId in the parent.
 *
 * @param {string} projectId The Google Cloud project ID (e.g., 'my-project-id').
 * @param {string} [location='us-central1'] The location of the reservation (e.g., 'us-central1').
 * @param {string} [reservationId='my-reservation'] The ID of the reservation to assign to (e.g., 'my-reservation'). Use 'none' for on-demand pricing.
 * @param {string} [assignee='projects/my-project'] The resource which will use the reservation. This must be a full resource name, e.g., 'projects/myproject', 'folders/123', or 'organizations/456'.
 * @param {string} [jobType='QUERY'] The type of jobs that will use the reservation. Must be one of: 'QUERY', 'PIPELINE', 'ML_EXTERNAL', 'BACKGROUND', 'CONTINUOUS'.
 * @param {string} [assignmentId='my-assignment-id'] Optional. The ID for the new assignment. If not provided, one will be generated by the service.
 */
async function createAssignment(
  projectId,
  location = 'us-central1',
  reservationId = 'my-reservation',
  assignee = 'projects/my-project',
  jobType = 'QUERY',
  assignmentId = 'my-assignment-id',
) {
  const parent = client.reservationPath(projectId, location, reservationId);

  const assignment = {
    assignee,
    jobType,
  };

  const request = {
    parent,
    assignment,
    assignmentId,
  };

  try {
    const [response] = await client.createAssignment(request);
    console.log(response.name);
    console.log(`  Assignee: ${response.assignee}`);
    console.log(`  Job Type: ${response.jobType}`);
    console.log(`  State: ${response.state}`);
  } catch (err) {
    if (err.code === status.ALREADY_EXISTS) {
      console.log(
        `Assignment for assignee '${assignee}' with job type '${jobType}' already exists for reservation '${reservationId}'.`,
      );
      console.log(
        'Consider updating the existing assignment or choosing a different assignee/jobType combination.',
      );
    } else if (err.code === status.NOT_FOUND) {
      console.error(
        `Error: The reservation '${reservationId}' in location '${location}' for project '${projectId}' was not found.`,
      );
      console.error(
        'Please ensure the reservation exists and the project ID, location, and reservation ID are correct.',
      );
    } else if (err.code === status.INVALID_ARGUMENT) {
      console.error(
        'Error: Invalid argument provided. Please check the assignee format, job type, or ensure the reservation location matches the assignment location.',
      );
      console.error(`Details: ${err.message}`);
    } else {
      console.error('An unexpected error occurred:', err);
    }
  }
}
// [END bigqueryreservation_v1_reservationservice_assignment_create_async]

async function main(args) {
  if (args.length !== 6) {
    throw new Error(
      `This script requires 6 arguments, but received ${args.length}.`,
    );
  }
  await createAssignment(args[0], args[1], args[2], args[3], args[4], args[5]);
}

if (require.main === module) {
  process.on('uncaughtException', err => {
    console.error(`Error running sample: ${err.message}`);
    console.error(
      'Usage: node reservation-service-client-assignment-create-async.js <projectId> <location> <reservationId> <assignee> <jobType> <assignmentId>',
    );
    console.error(
      'Example: node reservation-service-client-assignment-create-async.js my-project-id us-central1 my-reservation projects/my-project-id QUERY my-assignment-id',
    );
    console.error(
      'Example for "None" assignment: node reservation-service-client-assignment-create-async.js my-project-id us-central1 none projects/my-project-id QUERY my-none-assignment-id',
    );
    process.exitCode = 1;
  });
  main(process.argv.slice(2));
}

module.exports = {
  createAssignment,
};
