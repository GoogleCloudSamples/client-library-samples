# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse

# [START retail_v2alpha_product_create]
from google.api_core.exceptions import AlreadyExists, GoogleAPICallError
from google.cloud import retail_v2alpha


def create_product(
    project_id: str,
    location: str,
    catalog_id: str,
    branch_id: str,
    product_id: str,
    product_title: str,
) -> retail_v2alpha.Product:
    """Creates a product in the Retail API.

    Args:
        project_id: The Google Cloud project ID.
        location: The Google Cloud location (e.g., "global").
        catalog_id: The ID of the catalog.
        branch_id: The ID of the branch (e.g., 'default_branch').
        product_id: The ID of the product to create.
        product_title: The title of the product.

    Returns:
        The created Product object.
    """

    client = retail_v2alpha.ProductServiceClient()

    # The catalog and branch are typically 'default_catalog' and 'default_branch'.
    # You can retrieve them programmatically if needed, but for basic operations,
    # these hardcoded values are common.
    parent = client.branch_path(project_id, location, catalog_id, branch_id)
    # parent = f"projects/{project_id}/locations/{location}/catalogs/default_catalog/branches/default_branch"

    # Construct the product object.
    # A product must have a title and a type.
    # Product.Type.PRIMARY is used for standalone products or parent products for variants.
    # Product.Type.VARIANT is used for product variations (e.g., different colors/sizes of a primary product).
    # Product.Type.COLLECTION is used for product bundles.
    product = retail_v2alpha.Product(
        title=product_title,
        id=product_id,
        type_=retail_v2alpha.Product.Type.PRIMARY,
        categories=["Apparel", "T-Shirts"],  # Example
        # Add other product attributes as needed, e.g., price_info, categories, brands.
        # price_info=retail_v2alpha.PriceInfo(price=19.99, original_price=29.99),
        # brands=["ExampleBrand"],
    )

    # Construct the request.
    request = retail_v2alpha.CreateProductRequest(
        parent=parent,
        product=product,
        product_id=product_id,
    )

    try:
        created_product = client.create_product(request=request)
        print(f"Product created: {created_product.name}")
        print(f"Product ID: {created_product.id}")
        print(f"Product Title: {created_product.title}")
        return created_product
    except AlreadyExists:
        print(f"Product with ID '{product_id}' already exists. Skipping creation.")
        return None
    except GoogleAPICallError as e:
        print(f"Error creating product: {e}")
        if "PERMISSION_DENIED" in str(e):
            print(
                "Check your project ID, location, and ensure your service account has the 'Retail Editor' role or equivalent permissions."
            )
        elif "INVALID_ARGUMENT" in str(e):
            print(
                "Review the product data for invalid values (e.g., malformed IDs, too long strings)."
            )


# [END retail_v2alpha_product_create]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Create a product in Google Cloud Retail."
    )
    parser.add_argument(
        "--project_id",
        type=str,
        required=True,
        help="The Google Cloud project ID.",
    )
    parser.add_argument(
        "--location",
        type=str,
        default="global",
        help="The Google Cloud location (e.g., 'global'). Default is 'global'.",
    )
    parser.add_argument(
        "--catalog_id",
        type=str,
        default="default_catalog",
        help="The ID of the catalog.",
    )
    parser.add_argument(
        "--branch_id",
        type=str,
        default="default_branch",
        help="The ID of the branch (e.g., 'default_branch').",
    )
    parser.add_argument(
        "--product_id",
        type=str,
        required=True,
        help="The ID of the product to create. A unique ID is generated by default.",
    )
    parser.add_argument(
        "--product_title",
        type=str,
        default="Sample Product Title",
        help="The title of the product to create.",
    )

    args = parser.parse_args()

    create_product(
        project_id=args.project_id,
        location=args.location,
        catalog_id=args.catalog_id,
        branch_id=args.branch_id,
        product_id=args.product_id,
        product_title=args.product_title,
    )
